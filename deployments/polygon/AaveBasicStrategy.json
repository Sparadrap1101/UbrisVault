{
  "address": "0xA9BDf7764DeeED5F75dCe4F986F9349Eb20C6469",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenToBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paraswapAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "enterStrategy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exitStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAaveAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParaswapAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenToBorrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenToDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recolt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aaveAddress",
          "type": "address"
        }
      ],
      "name": "setAaveAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paraswapAddress",
          "type": "address"
        }
      ],
      "name": "setParaswapAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenToBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyTest",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "test",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40c2b46503ea4dbf3b5d1a01aed1458fa3c58a45dff278a9e5e38e58cf635bff",
  "receipt": {
    "to": null,
    "from": "0xF482139b4367189cBE729E9E291dC77c550C4255",
    "contractAddress": "0xA9BDf7764DeeED5F75dCe4F986F9349Eb20C6469",
    "transactionIndex": 30,
    "gasUsed": "2298071",
    "logsBloom": "0x
    "blockHash": "0x5fe9e57cc7ceac788f2098688e5553d051097b5845716fce6eef2632a3f2741d",
    "transactionHash": "0x40c2b46503ea4dbf3b5d1a01aed1458fa3c58a45dff278a9e5e38e58cf635bff",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 34161373,
        "transactionHash": "0x40c2b46503ea4dbf3b5d1a01aed1458fa3c58a45dff278a9e5e38e58cf635bff",
        "address": "0xA9BDf7764DeeED5F75dCe4F986F9349Eb20C6469",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f482139b4367189cbe729e9e291dc77c550c4255"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x5fe9e57cc7ceac788f2098688e5553d051097b5845716fce6eef2632a3f2741d"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 34161373,
        "transactionHash": "0x40c2b46503ea4dbf3b5d1a01aed1458fa3c58a45dff278a9e5e38e58cf635bff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f482139b4367189cbe729e9e291dc77c550c4255",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000023639368160e9ed00000000000000000000000000000000000000000000000003037580058da3a1000000000000000000000000000000000000000000003321f8eda51c6b105bb700000000000000000000000000000000000000000000000000cd3c49842cb9b4000000000000000000000000000000000000000000003321fb23de52ec7145a4",
        "logIndex": 107,
        "blockHash": "0x5fe9e57cc7ceac788f2098688e5553d051097b5845716fce6eef2632a3f2741d"
      }
    ],
    "blockNumber": 34161373,
    "cumulativeGasUsed": "7011975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
    "0x794a61358d6845594f94dc1db02a252b5b4814ad",
    "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57"
  ],
  "numDeployments": 3,
  "solcInputHash": "425a13162f5c1e90546afa044fd469e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paraswapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enterStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParaswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenToBorrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenToDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recolt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveAddress\",\"type\":\"address\"}],\"name\":\"setAaveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paraswapAddress\",\"type\":\"address\"}],\"name\":\"setParaswapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenToBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyTest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveBasicStrategy.sol\":\"AaveBasicStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IParaswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ninterface IParaswap {\\n    function multiSwap(Utils.SellData calldata data) external payable returns (uint256);\\n\\n    function megaSwap(Utils.MegaSwapSellData calldata data) external payable returns (uint256);\\n\\n    function protectedMultiSwap(Utils.SellData calldata data) external payable returns (uint256);\\n\\n    function protectedMegaSwap(Utils.MegaSwapSellData calldata data) external payable returns (uint256);\\n\\n    function protectedSimpleSwap(Utils.SimpleData calldata data) external payable returns (uint256 receivedAmount);\\n\\n    function protectedSimpleBuy(Utils.SimpleData calldata data) external payable;\\n\\n    function simpleSwap(Utils.SimpleData calldata data) external payable returns (uint256 receivedAmount);\\n\\n    function simpleBuy(Utils.SimpleData calldata data) external payable;\\n\\n    function swapOnUniswap(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function swapOnUniswapFork(\\n        address factory,\\n        bytes32 initCode,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function buyOnUniswap(\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function buyOnUniswapFork(\\n        address factory,\\n        bytes32 initCode,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function swapOnUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address weth,\\n        uint256[] calldata pools\\n    ) external payable;\\n\\n    function buyOnUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address weth,\\n        uint256[] calldata pools\\n    ) external payable;\\n\\n    function swapOnZeroXv2(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 amountOutMin,\\n        address exchange,\\n        bytes calldata payload\\n    ) external payable;\\n\\n    function swapOnZeroXv4(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 amountOutMin,\\n        address exchange,\\n        bytes calldata payload\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9dcb9afad508cf8b88c70e22a748d4e5c98bdcba90ec2f450f628ef4e825923d\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolAave.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n//import {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n//import {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     **/\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dafa5e3bc3781b2dceff239113fea8918ea89ffbe30f5504969668d56df8d00\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/Utils.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\nlibrary Utils {\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee;\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index; //Adapter at which index needs to be used\\n        address targetExchange;\\n        uint256 percent;\\n        bytes payload;\\n        uint256 networkFee; //Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; //Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n}\\n\",\"keccak256\":\"0xda099ccab3946dab77c72d88cd059db26a779bdf2039550034cfb5822d6f795a\"},\"contracts/strategies/AaveBasicStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPoolAave.sol\\\";\\nimport \\\"../interfaces/IParaswap.sol\\\";\\nimport \\\"../interfaces/Utils.sol\\\";\\n\\ncontract AaveBasicStrategy is Ownable {\\n    address private tokenAddress;\\n    address private tokenToBorrow;\\n    address private aaveAddress;\\n    address private paraswapAddress;\\n    IPool aave;\\n    IParaswap paraswap;\\n\\n    // Plus judicieux de mettre un % qu'un amount fixe pour la balance car elle sera amen\\u00e9 \\u00e0 pas mal bouger\\n    // Peut \\u00eatre un ERC20 comme font Yearn etc avec les yToken (check comment ils font exactement).\\n    mapping(address => uint256) private s_userBalances;\\n\\n    string public strategyTest = \\\"Not called yet.\\\";\\n\\n    // Ajouter des events ?\\n\\n    constructor(\\n        address _tokenAddress,\\n        address _tokenToBorrow,\\n        address _aaveAddress,\\n        address _paraswapAddress\\n    ) {\\n        tokenAddress = _tokenAddress;\\n        tokenToBorrow = _tokenToBorrow;\\n        aaveAddress = _aaveAddress;\\n        aave = IPool(_aaveAddress);\\n        paraswapAddress = _paraswapAddress;\\n        paraswap = IParaswap(_paraswapAddress);\\n        // Donner l'ownership au contrat factory et v\\u00e9rifier qu'il l'a bien avant d'add une strat\\u00e9gie ?\\n    }\\n\\n    function test(uint256 amount) public {\\n        strategyTest = \\\"1\\\";\\n        ERC20 token = ERC20(tokenAddress);\\n        strategyTest = \\\"2\\\";\\n        token.approve(paraswapAddress, amount);\\n        strategyTest = \\\"3\\\";\\n\\n        Utils.SimpleData memory dataForSwap;\\n        strategyTest = \\\"4\\\";\\n        // Attention car si le name est le m\\u00eame pour plusieurs strat\\u00e9gies et \\u00e7a peut poser prbl pour les events\\n        dataForSwap.fromToken = tokenAddress;\\n        dataForSwap.toToken = tokenToBorrow;\\n        dataForSwap.fromAmount = amount;\\n        dataForSwap.toAmount = amount - 10;\\n        dataForSwap.expectedAmount = amount - 1;\\n        dataForSwap.callees;\\n        dataForSwap.exchangeData;\\n        dataForSwap.startIndexes;\\n        dataForSwap.values;\\n        dataForSwap.beneficiary;\\n        dataForSwap.partner;\\n        dataForSwap.feePercent;\\n        dataForSwap.permit;\\n        dataForSwap.deadline = 25;\\n        dataForSwap.uuid;\\n        strategyTest = \\\"5\\\";\\n\\n        paraswap.simpleSwap(dataForSwap);\\n        strategyTest = \\\"6\\\";\\n    }\\n\\n    function supplyOnAavePool(uint256 amount) internal {\\n        ERC20 token = ERC20(tokenAddress);\\n        token.approve(aaveAddress, amount);\\n\\n        aave.supply(tokenAddress, amount, address(this), 0);\\n    }\\n\\n    function withdrawFromAavePool(uint256 amount) internal {\\n        aave.withdraw(tokenAddress, amount, address(this));\\n    }\\n\\n    function borrowOnAave(uint256 amountToBorrow, uint256 interestRateMode) internal {\\n        aave.borrow(tokenToBorrow, amountToBorrow, interestRateMode, 0, address(this));\\n    }\\n\\n    function strategy(uint256 amount) internal {\\n        supplyOnAavePool(amount);\\n\\n        uint256 amountToBorrow = (amount * 3) / 4;\\n        borrowOnAave(amountToBorrow, 2); // InterestRateMode = 2 -> Variable (1 -> Stable)\\n    } // Where the strategy structure is set.\\n\\n    function enterStrategy(\\n        address _tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) public payable {\\n        require(_tokenAddress == tokenAddress, \\\"This token is not available in this strategy.\\\");\\n        require(tokenAddress != address(0), \\\"This address is not valid for ERC20 token.\\\");\\n        ERC20 Erc20Token = ERC20(tokenAddress);\\n        Erc20Token.transferFrom(msg.sender, address(this), amount);\\n        s_userBalances[userAddress] += amount;\\n\\n        strategy(amount);\\n    } // Factory contract deposit user funds here.\\n\\n    function exitStrategy(address userAddress, uint256 amount) public {\\n        require(s_userBalances[userAddress] >= amount, \\\"You can't withdraw more than your wallet funds.\\\");\\n        require(tokenAddress != address(0), \\\"This address is not valid for ERC20 token.\\\");\\n        ERC20 Erc20Token = ERC20(tokenAddress);\\n        Erc20Token.transfer(msg.sender, amount);\\n        s_userBalances[userAddress] -= amount;\\n    } // Factory contract withdraw user funds here.\\n\\n    function recolt() public {\\n        strategyTest = \\\"Recolted.\\\";\\n    } // Factory contract tell strategy to recolt yield here.\\n\\n    function setAaveAddress(address _aaveAddress) public onlyOwner {\\n        // Si l'owner est la factory, faire une fonction dedans qui permet de modifier les adresses\\n        // des tokens dans les strat\\u00e9gies si n\\u00e9cessaire.\\n        require(_aaveAddress != address(0), \\\"This address is not available\\\");\\n        aaveAddress = _aaveAddress;\\n        aave = IPool(_aaveAddress);\\n    }\\n\\n    function getAaveAddress() public view returns (address) {\\n        return aaveAddress;\\n    }\\n\\n    function setParaswapAddress(address _paraswapAddress) public onlyOwner {\\n        // Si l'owner est la factory, faire une fonction dedans qui permet de modifier les adresses\\n        // des tokens dans les strat\\u00e9gies si n\\u00e9cessaire.\\n        require(_paraswapAddress != address(0), \\\"This address is not available\\\");\\n        paraswapAddress = _paraswapAddress;\\n        paraswap = IParaswap(_paraswapAddress);\\n    }\\n\\n    function getParaswapAddress() public view returns (address) {\\n        return paraswapAddress;\\n    }\\n\\n    function setTokenToDeposit(address newTokenAddress) public onlyOwner {\\n        // Si l'owner est la factory, faire une fonction dedans qui permet de modifier les adresses\\n        // des tokens dans les strat\\u00e9gies si n\\u00e9cessaire.\\n        require(newTokenAddress != address(0), \\\"This address is not available\\\");\\n        tokenAddress = newTokenAddress;\\n    }\\n\\n    function getTokenToDeposit() public view returns (address) {\\n        return tokenAddress;\\n    } // Return token address to deposit on strategy.\\n\\n    function setTokenToBorrow(address newTokenAddress) public onlyOwner {\\n        // Si l'owner est la factory, faire une fonction dedans qui permet de modifier les adresses\\n        // des tokens dans les strat\\u00e9gies si n\\u00e9cessaire.\\n        require(newTokenAddress != address(0), \\\"This address is not available\\\");\\n        tokenToBorrow = newTokenAddress;\\n    }\\n\\n    function getTokenToBorrow() public view returns (address) {\\n        return tokenToBorrow;\\n    } // Return token address to deposit on strategy.\\n\\n    function getUserBalance(address userAddress) public view returns (uint256) {\\n        return s_userBalances[userAddress];\\n    } // Return user balance in the strategy.\\n}\\n\",\"keccak256\":\"0x5d7e205e4f5ff6a47df943c74d28c2bc9e57eff751f642d0cd3a36481152898b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600f81526020017f4e6f742063616c6c6564207965742e0000000000000000000000000000000000815250600890805190602001906200005192919062000301565b503480156200005f57600080fd5b5060405162002a2638038062002a268339818101604052810190620000859190620003c8565b620000a5620000996200023560201b60201c565b6200023d60201b60201c565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620004f2565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200030f906200046e565b90600052602060002090601f0160209004810192826200033357600085556200037f565b82601f106200034e57805160ff19168380011785556200037f565b828001600101855582156200037f579182015b828111156200037e57825182559160200191906001019062000361565b5b5090506200038e919062000392565b5090565b5b80821115620003ad57600081600090555060010162000393565b5090565b600081519050620003c281620004d8565b92915050565b60008060008060808587031215620003e557620003e4620004d3565b5b6000620003f587828801620003b1565b94505060206200040887828801620003b1565b93505060406200041b87828801620003b1565b92505060606200042e87828801620003b1565b91505092959194509250565b600062000447826200044e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200048757607f821691505b602082108114156200049e576200049d620004a4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b620004e3816200043a565b8114620004ef57600080fd5b50565b61252480620005026000396000f3fe6080604052600436106100fe5760003560e01c806384c7dae611610095578063b8837f0011610064578063b8837f00146102eb578063dc77b9ee14610307578063f2fde38b14610330578063faaf3e0014610359578063fb27849314610382576100fe565b806384c7dae6146102435780638da5cb5b1461026c5780639cac2ccf14610297578063b1035aa4146102c2576100fe565b80634e47c85f116100d15780634e47c85f146101ab5780636dad4b35146101d6578063715018a614610201578063742128a814610218576100fe565b806329e99f07146101035780633889f2d61461012c57806347734892146101435780634998550314610180575b600080fd5b34801561010f57600080fd5b5061012a6004803603810190610125919061192a565b6103ab565b005b34801561013857600080fd5b50610141610837565b005b34801561014f57600080fd5b5061016a6004803603810190610165919061183d565b610885565b6040516101779190611f93565b60405180910390f35b34801561018c57600080fd5b506101956108ce565b6040516101a29190611e8f565b60405180910390f35b3480156101b757600080fd5b506101c061095c565b6040516101cd9190611d7c565b60405180910390f35b3480156101e257600080fd5b506101eb610986565b6040516101f89190611d7c565b60405180910390f35b34801561020d57600080fd5b506102166109b0565b005b34801561022457600080fd5b5061022d6109c4565b60405161023a9190611d7c565b60405180910390f35b34801561024f57600080fd5b5061026a600480360381019061026591906118bd565b6109ee565b005b34801561027857600080fd5b50610281610c12565b60405161028e9190611d7c565b60405180910390f35b3480156102a357600080fd5b506102ac610c3b565b6040516102b99190611d7c565b60405180910390f35b3480156102ce57600080fd5b506102e960048036038101906102e4919061183d565b610c65565b005b6103056004803603810190610300919061186a565b610d62565b005b34801561031357600080fd5b5061032e6004803603810190610329919061183d565b610fa0565b005b34801561033c57600080fd5b506103576004803603810190610352919061183d565b61105c565b005b34801561036557600080fd5b50610380600480360381019061037b919061183d565b6110e0565b005b34801561038e57600080fd5b506103a960048036038101906103a4919061183d565b61119c565b005b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250600890805190602001906103f6929190611665565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610469929190611665565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016104c7929190611dce565b602060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051991906118fd565b506040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610565929190611665565b5061056e6116eb565b6040518060400160405280600181526020017f3400000000000000000000000000000000000000000000000000000000000000815250600890805190602001906105b9929190611665565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816040018181525050600a836106859190612139565b81606001818152505060018361069b9190612139565b8160800181815250508060a00151508060c00151508060e001515080610100015150806101200151508061014001515080610160015150806101800151506019816101a0018181525050806101c00151506040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610737929190611665565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354e3f31b826040518263ffffffff1660e01b81526004016107939190611f71565b602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611957565b506040518060400160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610831929190611665565b50505050565b6040518060400160405280600981526020017f5265636f6c7465642e000000000000000000000000000000000000000000000081525060089080519060200190610882929190611665565b50565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600880546108db90612246565b80601f016020809104026020016040519081016040528092919081815260200182805461090790612246565b80156109545780601f1061092957610100808354040283529160200191610954565b820191906000526020600020905b81548152906001019060200180831161093757829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109b8611299565b6109c26000611317565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6790611f31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af990611f51565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610b64929190611dce565b602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906118fd565b5081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c069190612139565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c6d611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490611ef1565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990611ed1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611f51565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ee893929190611d97565b602060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a91906118fd565b5081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8a9190612058565b92505081905550610f9a826113db565b50505050565b610fa8611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100f90611ef1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611064611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb90611eb1565b60405180910390fd5b6110dd81611317565b50565b6110e8611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611ef1565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111a4611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120b90611ef1565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112a1611410565b73ffffffffffffffffffffffffffffffffffffffff166112bf610c12565b73ffffffffffffffffffffffffffffffffffffffff1614611315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130c90611f11565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6113e481611418565b600060046003836113f591906120df565b6113ff91906120ae565b905061140c8160026115a9565b5050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161149c929190611dce565b602060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee91906118fd565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663617ba037600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16843060006040518563ffffffff1660e01b81526004016115739493929190611df7565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a415bcad600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846000306040518663ffffffff1660e01b815260040161162f959493929190611e3c565b600060405180830381600087803b15801561164957600080fd5b505af115801561165d573d6000803e3d6000fd5b505050505050565b82805461167190612246565b90600052602060002090601f01602090048101928261169357600085556116da565b82601f106116ac57805160ff19168380011785556116da565b828001600101855582156116da579182015b828111156116d95782518255916020019190600101906116be565b5b5090506116e791906117cc565b5090565b604051806101e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016000815260200160006fffffffffffffffffffffffffffffffff191681525090565b5b808211156117e55760008160009055506001016117cd565b5090565b6000813590506117f8816124a9565b92915050565b60008151905061180d816124c0565b92915050565b600081359050611822816124d7565b92915050565b600081519050611837816124d7565b92915050565b60006020828403121561185357611852612305565b5b6000611861848285016117e9565b91505092915050565b60008060006060848603121561188357611882612305565b5b6000611891868287016117e9565b93505060206118a2868287016117e9565b92505060406118b386828701611813565b9150509250925092565b600080604083850312156118d4576118d3612305565b5b60006118e2858286016117e9565b92505060206118f385828601611813565b9150509250929050565b60006020828403121561191357611912612305565b5b6000611921848285016117fe565b91505092915050565b6000602082840312156119405761193f612305565b5b600061194e84828501611813565b91505092915050565b60006020828403121561196d5761196c612305565b5b600061197b84828501611828565b91505092915050565b600061199083836119c3565b60208301905092915050565b60006119a88383611d5e565b60208301905092915050565b6119bd8161217f565b82525050565b6119cc8161216d565b82525050565b6119db8161216d565b82525050565b60006119ec82611fce565b6119f68185612014565b9350611a0183611fae565b8060005b83811015611a32578151611a198882611984565b9750611a2483611ffa565b925050600181019050611a05565b5085935050505092915050565b6000611a4a82611fd9565b611a548185612025565b9350611a5f83611fbe565b8060005b83811015611a90578151611a77888261199c565b9750611a8283612007565b925050600181019050611a63565b5085935050505092915050565b611aa68161219d565b82525050565b6000611ab782611fe4565b611ac18185612036565b9350611ad1818560208601612213565b611ada8161230a565b840191505092915050565b611aee81612201565b82525050565b6000611aff82611fef565b611b098185612047565b9350611b19818560208601612213565b611b228161230a565b840191505092915050565b6000611b3a602683612047565b9150611b458261231b565b604082019050919050565b6000611b5d602d83612047565b9150611b688261236a565b604082019050919050565b6000611b80601d83612047565b9150611b8b826123b9565b602082019050919050565b6000611ba3602083612047565b9150611bae826123e2565b602082019050919050565b6000611bc6602f83612047565b9150611bd18261240b565b604082019050919050565b6000611be9602a83612047565b9150611bf48261245a565b604082019050919050565b60006101e083016000830151611c1860008601826119c3565b506020830151611c2b60208601826119c3565b506040830151611c3e6040860182611d5e565b506060830151611c516060860182611d5e565b506080830151611c646080860182611d5e565b5060a083015184820360a0860152611c7c82826119e1565b91505060c083015184820360c0860152611c968282611aac565b91505060e083015184820360e0860152611cb08282611a3f565b915050610100830151848203610100860152611ccc8282611a3f565b915050610120830151611ce36101208601826119b4565b50610140830151611cf86101408601826119b4565b50610160830151611d0d610160860182611d5e565b50610180830151848203610180860152611d278282611aac565b9150506101a0830151611d3e6101a0860182611d5e565b506101c0830151611d536101c0860182611a9d565b508091505092915050565b611d67816121f7565b82525050565b611d76816121f7565b82525050565b6000602082019050611d9160008301846119d2565b92915050565b6000606082019050611dac60008301866119d2565b611db960208301856119d2565b611dc66040830184611d6d565b949350505050565b6000604082019050611de360008301856119d2565b611df06020830184611d6d565b9392505050565b6000608082019050611e0c60008301876119d2565b611e196020830186611d6d565b611e2660408301856119d2565b611e336060830184611ae5565b95945050505050565b600060a082019050611e5160008301886119d2565b611e5e6020830187611d6d565b611e6b6040830186611d6d565b611e786060830185611ae5565b611e8560808301846119d2565b9695505050505050565b60006020820190508181036000830152611ea98184611af4565b905092915050565b60006020820190508181036000830152611eca81611b2d565b9050919050565b60006020820190508181036000830152611eea81611b50565b9050919050565b60006020820190508181036000830152611f0a81611b73565b9050919050565b60006020820190508181036000830152611f2a81611b96565b9050919050565b60006020820190508181036000830152611f4a81611bb9565b9050919050565b60006020820190508181036000830152611f6a81611bdc565b9050919050565b60006020820190508181036000830152611f8b8184611bff565b905092915050565b6000602082019050611fa86000830184611d6d565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612063826121f7565b915061206e836121f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120a3576120a2612278565b5b828201905092915050565b60006120b9826121f7565b91506120c4836121f7565b9250826120d4576120d36122a7565b5b828204905092915050565b60006120ea826121f7565b91506120f5836121f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561212e5761212d612278565b5b828202905092915050565b6000612144826121f7565b915061214f836121f7565b92508282101561216257612161612278565b5b828203905092915050565b6000612178826121d7565b9050919050565b600061218a826121d7565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061220c826121c9565b9050919050565b60005b83811015612231578082015181840152602081019050612216565b83811115612240576000848401525b50505050565b6000600282049050600182168061225e57607f821691505b60208210811415612272576122716122d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5468697320746f6b656e206973206e6f7420617661696c61626c6520696e207460008201527f6869732073747261746567792e00000000000000000000000000000000000000602082015250565b7f546869732061646472657373206973206e6f7420617661696c61626c65000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f752063616e2774207769746864726177206d6f7265207468616e20796f7560008201527f722077616c6c65742066756e64732e0000000000000000000000000000000000602082015250565b7f546869732061646472657373206973206e6f742076616c696420666f7220455260008201527f43323020746f6b656e2e00000000000000000000000000000000000000000000602082015250565b6124b28161216d565b81146124bd57600080fd5b50565b6124c981612191565b81146124d457600080fd5b50565b6124e0816121f7565b81146124eb57600080fd5b5056fea2646970667358221220405d9c0f1824effa6e0a31e089aa89292c15e934964a0bc69b2668394b10e73364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c806384c7dae611610095578063b8837f0011610064578063b8837f00146102eb578063dc77b9ee14610307578063f2fde38b14610330578063faaf3e0014610359578063fb27849314610382576100fe565b806384c7dae6146102435780638da5cb5b1461026c5780639cac2ccf14610297578063b1035aa4146102c2576100fe565b80634e47c85f116100d15780634e47c85f146101ab5780636dad4b35146101d6578063715018a614610201578063742128a814610218576100fe565b806329e99f07146101035780633889f2d61461012c57806347734892146101435780634998550314610180575b600080fd5b34801561010f57600080fd5b5061012a6004803603810190610125919061192a565b6103ab565b005b34801561013857600080fd5b50610141610837565b005b34801561014f57600080fd5b5061016a6004803603810190610165919061183d565b610885565b6040516101779190611f93565b60405180910390f35b34801561018c57600080fd5b506101956108ce565b6040516101a29190611e8f565b60405180910390f35b3480156101b757600080fd5b506101c061095c565b6040516101cd9190611d7c565b60405180910390f35b3480156101e257600080fd5b506101eb610986565b6040516101f89190611d7c565b60405180910390f35b34801561020d57600080fd5b506102166109b0565b005b34801561022457600080fd5b5061022d6109c4565b60405161023a9190611d7c565b60405180910390f35b34801561024f57600080fd5b5061026a600480360381019061026591906118bd565b6109ee565b005b34801561027857600080fd5b50610281610c12565b60405161028e9190611d7c565b60405180910390f35b3480156102a357600080fd5b506102ac610c3b565b6040516102b99190611d7c565b60405180910390f35b3480156102ce57600080fd5b506102e960048036038101906102e4919061183d565b610c65565b005b6103056004803603810190610300919061186a565b610d62565b005b34801561031357600080fd5b5061032e6004803603810190610329919061183d565b610fa0565b005b34801561033c57600080fd5b506103576004803603810190610352919061183d565b61105c565b005b34801561036557600080fd5b50610380600480360381019061037b919061183d565b6110e0565b005b34801561038e57600080fd5b506103a960048036038101906103a4919061183d565b61119c565b005b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250600890805190602001906103f6929190611665565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610469929190611665565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016104c7929190611dce565b602060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051991906118fd565b506040518060400160405280600181526020017f330000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610565929190611665565b5061056e6116eb565b6040518060400160405280600181526020017f3400000000000000000000000000000000000000000000000000000000000000815250600890805190602001906105b9929190611665565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816040018181525050600a836106859190612139565b81606001818152505060018361069b9190612139565b8160800181815250508060a00151508060c00151508060e001515080610100015150806101200151508061014001515080610160015150806101800151506019816101a0018181525050806101c00151506040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610737929190611665565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354e3f31b826040518263ffffffff1660e01b81526004016107939190611f71565b602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190611957565b506040518060400160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525060089080519060200190610831929190611665565b50505050565b6040518060400160405280600981526020017f5265636f6c7465642e000000000000000000000000000000000000000000000081525060089080519060200190610882929190611665565b50565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600880546108db90612246565b80601f016020809104026020016040519081016040528092919081815260200182805461090790612246565b80156109545780601f1061092957610100808354040283529160200191610954565b820191906000526020600020905b81548152906001019060200180831161093757829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109b8611299565b6109c26000611317565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6790611f31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af990611f51565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610b64929190611dce565b602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906118fd565b5081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c069190612139565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c6d611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490611ef1565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990611ed1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611f51565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ee893929190611d97565b602060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3a91906118fd565b5081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8a9190612058565b92505081905550610f9a826113db565b50505050565b610fa8611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100f90611ef1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611064611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb90611eb1565b60405180910390fd5b6110dd81611317565b50565b6110e8611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611ef1565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111a4611299565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120b90611ef1565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112a1611410565b73ffffffffffffffffffffffffffffffffffffffff166112bf610c12565b73ffffffffffffffffffffffffffffffffffffffff1614611315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130c90611f11565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6113e481611418565b600060046003836113f591906120df565b6113ff91906120ae565b905061140c8160026115a9565b5050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161149c929190611dce565b602060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee91906118fd565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663617ba037600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16843060006040518563ffffffff1660e01b81526004016115739493929190611df7565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a415bcad600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846000306040518663ffffffff1660e01b815260040161162f959493929190611e3c565b600060405180830381600087803b15801561164957600080fd5b505af115801561165d573d6000803e3d6000fd5b505050505050565b82805461167190612246565b90600052602060002090601f01602090048101928261169357600085556116da565b82601f106116ac57805160ff19168380011785556116da565b828001600101855582156116da579182015b828111156116d95782518255916020019190600101906116be565b5b5090506116e791906117cc565b5090565b604051806101e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016000815260200160006fffffffffffffffffffffffffffffffff191681525090565b5b808211156117e55760008160009055506001016117cd565b5090565b6000813590506117f8816124a9565b92915050565b60008151905061180d816124c0565b92915050565b600081359050611822816124d7565b92915050565b600081519050611837816124d7565b92915050565b60006020828403121561185357611852612305565b5b6000611861848285016117e9565b91505092915050565b60008060006060848603121561188357611882612305565b5b6000611891868287016117e9565b93505060206118a2868287016117e9565b92505060406118b386828701611813565b9150509250925092565b600080604083850312156118d4576118d3612305565b5b60006118e2858286016117e9565b92505060206118f385828601611813565b9150509250929050565b60006020828403121561191357611912612305565b5b6000611921848285016117fe565b91505092915050565b6000602082840312156119405761193f612305565b5b600061194e84828501611813565b91505092915050565b60006020828403121561196d5761196c612305565b5b600061197b84828501611828565b91505092915050565b600061199083836119c3565b60208301905092915050565b60006119a88383611d5e565b60208301905092915050565b6119bd8161217f565b82525050565b6119cc8161216d565b82525050565b6119db8161216d565b82525050565b60006119ec82611fce565b6119f68185612014565b9350611a0183611fae565b8060005b83811015611a32578151611a198882611984565b9750611a2483611ffa565b925050600181019050611a05565b5085935050505092915050565b6000611a4a82611fd9565b611a548185612025565b9350611a5f83611fbe565b8060005b83811015611a90578151611a77888261199c565b9750611a8283612007565b925050600181019050611a63565b5085935050505092915050565b611aa68161219d565b82525050565b6000611ab782611fe4565b611ac18185612036565b9350611ad1818560208601612213565b611ada8161230a565b840191505092915050565b611aee81612201565b82525050565b6000611aff82611fef565b611b098185612047565b9350611b19818560208601612213565b611b228161230a565b840191505092915050565b6000611b3a602683612047565b9150611b458261231b565b604082019050919050565b6000611b5d602d83612047565b9150611b688261236a565b604082019050919050565b6000611b80601d83612047565b9150611b8b826123b9565b602082019050919050565b6000611ba3602083612047565b9150611bae826123e2565b602082019050919050565b6000611bc6602f83612047565b9150611bd18261240b565b604082019050919050565b6000611be9602a83612047565b9150611bf48261245a565b604082019050919050565b60006101e083016000830151611c1860008601826119c3565b506020830151611c2b60208601826119c3565b506040830151611c3e6040860182611d5e565b506060830151611c516060860182611d5e565b506080830151611c646080860182611d5e565b5060a083015184820360a0860152611c7c82826119e1565b91505060c083015184820360c0860152611c968282611aac565b91505060e083015184820360e0860152611cb08282611a3f565b915050610100830151848203610100860152611ccc8282611a3f565b915050610120830151611ce36101208601826119b4565b50610140830151611cf86101408601826119b4565b50610160830151611d0d610160860182611d5e565b50610180830151848203610180860152611d278282611aac565b9150506101a0830151611d3e6101a0860182611d5e565b506101c0830151611d536101c0860182611a9d565b508091505092915050565b611d67816121f7565b82525050565b611d76816121f7565b82525050565b6000602082019050611d9160008301846119d2565b92915050565b6000606082019050611dac60008301866119d2565b611db960208301856119d2565b611dc66040830184611d6d565b949350505050565b6000604082019050611de360008301856119d2565b611df06020830184611d6d565b9392505050565b6000608082019050611e0c60008301876119d2565b611e196020830186611d6d565b611e2660408301856119d2565b611e336060830184611ae5565b95945050505050565b600060a082019050611e5160008301886119d2565b611e5e6020830187611d6d565b611e6b6040830186611d6d565b611e786060830185611ae5565b611e8560808301846119d2565b9695505050505050565b60006020820190508181036000830152611ea98184611af4565b905092915050565b60006020820190508181036000830152611eca81611b2d565b9050919050565b60006020820190508181036000830152611eea81611b50565b9050919050565b60006020820190508181036000830152611f0a81611b73565b9050919050565b60006020820190508181036000830152611f2a81611b96565b9050919050565b60006020820190508181036000830152611f4a81611bb9565b9050919050565b60006020820190508181036000830152611f6a81611bdc565b9050919050565b60006020820190508181036000830152611f8b8184611bff565b905092915050565b6000602082019050611fa86000830184611d6d565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612063826121f7565b915061206e836121f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120a3576120a2612278565b5b828201905092915050565b60006120b9826121f7565b91506120c4836121f7565b9250826120d4576120d36122a7565b5b828204905092915050565b60006120ea826121f7565b91506120f5836121f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561212e5761212d612278565b5b828202905092915050565b6000612144826121f7565b915061214f836121f7565b92508282101561216257612161612278565b5b828203905092915050565b6000612178826121d7565b9050919050565b600061218a826121d7565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061220c826121c9565b9050919050565b60005b83811015612231578082015181840152602081019050612216565b83811115612240576000848401525b50505050565b6000600282049050600182168061225e57607f821691505b60208210811415612272576122716122d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5468697320746f6b656e206973206e6f7420617661696c61626c6520696e207460008201527f6869732073747261746567792e00000000000000000000000000000000000000602082015250565b7f546869732061646472657373206973206e6f7420617661696c61626c65000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f752063616e2774207769746864726177206d6f7265207468616e20796f7560008201527f722077616c6c65742066756e64732e0000000000000000000000000000000000602082015250565b7f546869732061646472657373206973206e6f742076616c696420666f7220455260008201527f43323020746f6b656e2e00000000000000000000000000000000000000000000602082015250565b6124b28161216d565b81146124bd57600080fd5b50565b6124c981612191565b81146124d457600080fd5b50565b6124e0816121f7565b81146124eb57600080fd5b5056fea2646970667358221220405d9c0f1824effa6e0a31e089aa89292c15e934964a0bc69b2668394b10e73364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1374,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1376,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "tokenToBorrow",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1378,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "aaveAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1380,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "paraswapAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1383,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "aave",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPool)1238"
      },
      {
        "astId": 1386,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "paraswap",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IParaswap)1001"
      },
      {
        "astId": 1390,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "s_userBalances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1393,
        "contract": "contracts/strategies/AaveBasicStrategy.sol:AaveBasicStrategy",
        "label": "strategyTest",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IParaswap)1001": {
        "encoding": "inplace",
        "label": "contract IParaswap",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)1238": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}